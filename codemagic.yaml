workflows:
  ios_unsigned:
    name: iOS unsigned IPA
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: 15.4
      cocoapods: 1.16.2
      vars:
        FLUTTER_BUILD_NAME: "1.0.0"
        FLUTTER_BUILD_NUMBER: "1"
    cache:
      cache_paths:
        - ~/.pub-cache
        - ios/Pods
        - ~/Library/Caches/CocoaPods
    scripts:
      - name: Show tool versions
        script: |
          set -e
          flutter --version
          pod --version
          xcodebuild -version

      - name: Prepare Flutter iOS (precache & simulator build to generate ios/Flutter/podhelper.rb)
        script: |
          set -e
          flutter clean
          flutter pub get
          # يجهّز أدوات iOS وينسخ ios/Flutter/podhelper.rb
          flutter precache --ios
          flutter build ios --no-codesign --simulator

      - name: Write Podfile (iOS 15 + modular headers)
        script: |
          set -e
          cat > ios/Podfile <<'POD'
          platform :ios, '15.0'
          use_frameworks! :linkage => :static
          use_modular_headers!
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          # استخدم نسخة podhelper.rb الموجودة محلياً داخل ios/Flutter (أنشأها Flutter أعلاه)
          require File.expand_path('Flutter/podhelper.rb', __dir__)

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

            # تثبيت GoogleUtilities مع modular headers لحل تحذير Swift static
            pod 'GoogleUtilities', '7.13.1', :modular_headers => true
            # مثال (اختياري) لو أردت Analytics:
            # pod 'Firebase/Analytics'
          end

          post_install do |installer|
            installer.pods_project.targets.each do |t|
              t.build_configurations.each do |config|
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['SWIFT_VERSION'] = '5.0'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
              end
              if t.name == 'gRPC-C++' || t.name == 'gRPC-Core'
                t.build_configurations.each do |config|
                  config.build_settings['MACH_O_TYPE'] = 'staticlib'
                end
              end
            end
          end
          POD

      - name: CocoaPods repo update & install
        script: |
          set -e
          cd ios
          pod repo update
          rm -f Podfile.lock
          rm -rf Pods
          pod install --repo-update
          echo "== Installed pods =="
          ls -1 Pods | sed 's/^/ - /'

      - name: Build iOS (no codesign)
        script: |
          set -e
          flutter build ipa --no-codesign --build-name=$FLUTTER_BUILD_NAME --build-number=$FLUTTER_BUILD_NUMBER
          # في العادة سيوجد build/ios/ipa/Runner.ipa مباشرة

      - name: Verify Flutter assets exist
        script: |
          set -e
          APP="build/ios/iphoneos/Runner.app"
          test -d "$APP" || { echo "❌ Runner.app غير موجود"; exit 64; }
          test -d "$APP/Frameworks/App.framework" || { echo "❌ App.framework مفقود (سبب شاشة سوداء)"; exit 65; }
          test -d "$APP/flutter_assets" || { echo "❌ مجلد flutter_assets مفقود (سبب شاشة سوداء)"; exit 66; }
          echo "✅ App.framework و flutter_assets موجودان"

      - name: Export unsigned IPA from archive (fallback)
        script: |
          set -e
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
            echo "IPA already present at build/ios/ipa/Runner.ipa"
          else
            ARCHIVE_PATH="$(find build -type d -name 'Runner.xcarchive' -maxdepth 6 -print | head -n 1 || true)"
            if [ -n "$ARCHIVE_PATH" ]; then
              mkdir -p build/ios/ipa
              cat > /tmp/ExportOptions.plist <<'PLIST'
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                <key>compileBitcode</key><false/>
                <key>destination</key><string>export</string>
                <key>method</key><string>ad-hoc</string>
                <key>signingStyle</key><string>manual</string>
                <key>stripSwiftSymbols</key><false/>
                <key>thinning</key><string>&lt;none&gt;</string>
                <key>manageAppVersionAndBuildNumber</key><false/>
              </dict>
              </plist>
              PLIST
              xcodebuild -exportArchive \
                -archivePath "$ARCHIVE_PATH" \
                -exportPath build/ios/ipa \
                -exportOptionsPlist /tmp/ExportOptions.plist \
                CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY=""
            fi
          fi
          echo "== IPA files =="
          find build -maxdepth 4 -type f -name "*.ipa" -print || true

      - name: Verify artifact
        script: |
          set -e
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
            echo "✅ IPA ready: build/ios/ipa/Runner.ipa"
          else
            echo "❌ IPA not found, listing:"
            find build -maxdepth 4 -type f -name "*.ipa" -print
            exit 1
          fi

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive/*.xcarchive

    publishing:
      email:
        recipients:
          - you@example.com
        notify:
          success: true
          failure: true
