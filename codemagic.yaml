workflows:
  ios_unsigned:
    name: iOS Unsigned IPA
    max_build_duration: 60
    instance_type: mac_mini_m1

    environment:
      xcode: 15.4
      cocoapods: default
      flutter: stable
      vars:
        BUNDLE_ID: com.example.platonSport

    cache:
      cache_paths:
        - ~/.pub-cache
        - ios/Pods

    scripts:
      - name: Flutter info
        script: |
          flutter --version
          flutter doctor -v

      - name: Precache & clean
        script: |
          flutter precache --ios
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock

      # يضمن Podfile صحيح و iOS 15.0 + يفعّل الإعدادات اللازمة للفFirebase
      - name: Ensure Podfile (iOS 15, frameworks & modular headers)
        script: |
          cat > ios/Podfile <<'POD'
          platform :ios, '15.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          # ==== Resolve FLUTTER_ROOT robustly (works on Codemagic/macOS) ====
          flutter_root = ENV['FLUTTER_ROOT']

          if flutter_root.nil? || flutter_root.empty?
            begin
              machine = `flutter --version --machine 2>/dev/null`
              m = machine.match(/"flutterRoot"\s*:\s*"([^"]+)"/)
              flutter_root = m[1] unless m.nil?
            rescue
              flutter_root = nil
            end
          end

          if flutter_root.nil? || flutter_root.empty?
            which_flutter = `which flutter`.strip
            if !which_flutter.nil? && !which_flutter.empty?
              bin_dir = File.dirname(which_flutter)         # /usr/local/bin
              maybe_root = File.expand_path('..', bin_dir)  # /usr/local
              candidate = File.join(maybe_root, 'flutter')  # /usr/local/flutter
              flutter_root = candidate if File.exist?(candidate)
            end
          end

          raise '❌ FLUTTER_ROOT not resolved; cannot load podhelper.rb' if flutter_root.nil? || flutter_root.empty?

          load File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')
          # ===================================================================

          # Firebase/Firestore need frameworks + modular headers
          use_frameworks! :linkage => :static
          use_modular_headers!

          flutter_ios_podfile_setup

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |target|
              flutter_additional_ios_build_settings(target)
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['SWIFT_VERSION'] = '5.0'
                config.build_settings['DEAD_CODE_STRIPPING'] = 'YES'
              end
            end
          end
          POD

      - name: Pod install
        script: |
          cd ios
          pod repo update
          pod install --verbose
          cd ..

      - name: Get packages
        script: |
          flutter pub get

      - name: Build unsigned archive (no code signing)
        script: |
          # سيولّد Runner.xcarchive وأحياناً Runner.ipa مباشرة
          flutter build ipa --release --no-codesign

      - name: Export IPA if needed
        script: |
          set -e
          ARCHIVE_PATH="$(find build -type d -name 'Runner.xcarchive' -maxdepth 6 -print | head -n 1 || true)"
          if [ -n "$ARCHIVE_PATH" ]; then
            mkdir -p build/ios/ipa
            cat > /tmp/ExportOptions.plist <<'PLIST'
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>compileBitcode</key><false/>
              <key>destination</key><string>export</string>
              <key>method</key><string>release-testing</string>
              <key>signingStyle</key><string>manual</string>
              <key>stripSwiftSymbols</key><false/>
              <key>thinning</key><string>&lt;none&gt;</string>
              <key>manageAppVersionAndBuildNumber</key><false/>
            </dict>
            </plist>
            PLIST

            xcodebuild -exportArchive \
              -archivePath "$ARCHIVE_PATH" \
              -exportPath build/ios/ipa \
              -exportOptionsPlist /tmp/ExportOptions.plist \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY=""
          else
            echo "ℹ️ لا أرشيف للـ Xcode، ربما Flutter أنشأ IPA مباشرة. نكمل التحقق."
          fi

      - name: Verify artifact
        script: |
          echo "== Tree build/ios =="
          ls -R build/ios || true
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
            echo "✅ IPA ready at build/ios/ipa/Runner.ipa"
            exit 0
          fi
          # fallback: أحياناً فلاتر يخرج ipa مباشرة تحت build/ios/ipa أو مكان آخر
          FOUND=$(find build -type f -name '*.ipa' -maxdepth 6 | head -n 1 || true)
          if [ -n "$FOUND" ]; then
            echo "✅ Found IPA at: $FOUND"
            mkdir -p build/ios/ipa && cp "$FOUND" build/ios/ipa/Runner.ipa
            exit 0
          fi
          echo "❌ IPA not found"
          exit 1

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive/*.xcarchive

    publishing:
      email:
        recipients:
          - you@example.com
