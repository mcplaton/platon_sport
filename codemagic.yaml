workflows:
  ios_unsigned:
    name: iOS unsigned IPA
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: 15.4
      cocoapods: 1.16.2
      vars:
        FLUTTER_BUILD_NAME: "1.0.0"
        FLUTTER_BUILD_NUMBER: "1"
    cache:
      cache_paths:
        - ~/.pub-cache
        - ios/Pods
        - ~/Library/Caches/CocoaPods
    scripts:
      - name: Tool versions
        script: |
          set -e
          flutter --version
          pod --version
          xcodebuild -version

      - name: Clean & get packages
        script: |
          set -e
          flutter clean
          flutter pub get

      - name: Write Podfile (overwrite with our fixed one)
        script: |
          set -e
          cat > ios/Podfile <<'POD'
          platform :ios, '15.0'
          use_frameworks! :linkage => :static
          use_modular_headers!
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          flutter_root = ENV['FLUTTER_ROOT']
          if flutter_root.nil? || flutter_root.empty?
            flutter_root = `flutter --version --machine 2>/dev/null | grep -o '"engineRevision":"[^"]*"' || true`
            flutter_root = File.expand_path('..', __dir__) # fallback
          end
          load File.join(File.expand_path('..', __dir__), 'packages', 'flutter_tools', 'bin', 'podhelper.rb')

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            pod 'GoogleUtilities', '7.13.1', :modular_headers => true
          end

          post_install do |installer|
            installer.pods_project.targets.each do |t|
              t.build_configurations.each do |config|
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['SWIFT_VERSION'] = '5.0'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                config.build_settings['OTHER_LDFLAGS'] = '$(inherited) -framework Flutter'
              end
              if t.name == 'gRPC-C++' || t.name == 'gRPC-Core'
                t.build_configurations.each do |config|
                  config.build_settings['MACH_O_TYPE'] = 'staticlib'
                end
              end
            end
          end
          POD

      - name: CocoaPods repo update & install
        script: |
          set -e
          cd ios
          pod repo update
          rm -f Podfile.lock
          rm -rf Pods
          pod install --repo-update
          echo "== Installed pods =="
          ls -1 Pods | sed 's/^/ - /'

      - name: Build iOS IPA (no codesign)
        script: |
          set -e
          # ينتج ipa مباشرة في build/ios/ipa/Runner.ipa
          flutter build ipa --no-codesign \
            --build-name=$FLUTTER_BUILD_NAME \
            --build-number=$FLUTTER_BUILD_NUMBER

      - name: Verify Flutter assets exist
        script: |
          set -e
          APP="build/ios/iphoneos/Runner.app"
          test -d "$APP" || { echo "❌ Runner.app غير موجود"; exit 64; }
          test -d "$APP/Frameworks/App.framework" || { echo "❌ App.framework مفقود (سبب شاشة سوداء)"; exit 65; }
          test -d "$APP/flutter_assets" || { echo "❌ مجلد flutter_assets مفقود (سبب شاشة سوداء)"; exit 66; }
          echo "✅ App.framework و flutter_assets موجودان"

      - name: Verify IPA artifact
        script: |
          set -e
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
            echo "✅ IPA ready: build/ios/ipa/Runner.ipa"
          else
            echo "❌ IPA not found, listing:"
            find build -maxdepth 4 -type f -name "*.ipa" -print
            exit 1
          fi

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/archive/*.xcarchive
