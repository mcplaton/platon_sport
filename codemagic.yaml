workflows:
  ios_unsigned:
    name: iOS Unsigned (PlaToN Sport)
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default

    scripts:
      - name: Flutter clean & pub get
        script: |
          set -e
          flutter --version
          flutter clean
          flutter pub get

      - name: Prepare iOS Podfile (iOS 15 + static frameworks)
        script: |
          set -e
          cd ios

          # 1) اجعل الهدف iOS 15.0
          if grep -q "^platform :ios" Podfile; then
            sed -i.bak "s/^platform :ios.*/platform :ios, '15.0'/" Podfile
          else
            echo "platform :ios, '15.0'" | cat - Podfile > Podfile.tmp && mv Podfile.tmp Podfile
          fi

          # 2) static frameworks
          if grep -q "^use_frameworks!" Podfile; then
            sed -i.bak "s/^use_frameworks!.*/use_frameworks! :linkage => :static/" Podfile
          else
            printf "\nuse_frameworks! :linkage => :static\n" >> Podfile
          fi

          # 3) post_install لضبط IPHONEOS_DEPLOYMENT_TARGET
          if ! grep -q "post_install do" Podfile; then
            printf '\npost_install do |installer|\n' >> Podfile
            printf '  installer.pods_project.targets.each do |t|\n' >> Podfile
            printf '    t.build_configurations.each do |config|\n' >> Podfile
            printf '      config.build_settings["IPHONEOS_DEPLOYMENT_TARGET"] = "15.0"\n' >> Podfile
            printf '    end\n' >> Podfile
            printf '  end\n' >> Podfile
            printf 'end\n' >> Podfile
          fi
          cd -

      - name: Update CocoaPods repos
        script: |
          set -e
          cd ios
          pod repo update
          cd -

      - name: Build iOS (no codesign)
        script: |
          set -e
          flutter build ios --release --no-codesign

      - name: Fix flutter_assets path (prevent black screen)
        script: |
          set -e
          APP_DIR="build/ios/iphoneos/Runner.app"

          if [ -d "$APP_DIR/Frameworks/App.framework/flutter_assets" ]; then
            mv "$APP_DIR/Frameworks/App.framework/flutter_assets" "$APP_DIR/"
          fi

          if [ -f "ios/Runner/GoogleService-Info.plist" ] && [ ! -f "$APP_DIR/GoogleService-Info.plist" ]; then
            cp ios/Runner/GoogleService-Info.plist "$APP_DIR/GoogleService-Info.plist"
          fi

      - name: Verify Flutter assets exist
        script: |
          set -e
          APP_DIR="build/ios/iphoneos/Runner.app"
          test -d "$APP_DIR" || { echo "❌ Runner.app غير موجود"; exit 64; }
          test -f "$APP_DIR/Frameworks/App.framework/App" || { echo "❌ App.framework/App مفقود"; exit 65; }
          test -d "$APP_DIR/flutter_assets" || { echo "❌ flutter_assets مفقود"; exit 66; }
          echo "✅ App.framework و flutter_assets موجودان"

      - name: Package unsigned IPA (manual zip)
        script: |
          set -e
          OUT_DIR="build/ios/ipa"
          APP_DIR="build/ios/iphoneos/Runner.app"
          mkdir -p "$OUT_DIR/Payload"
          cp -R "$APP_DIR" "$OUT_DIR/Payload/Runner.app"
          (cd "$OUT_DIR" && zip -qry "Runner-unsigned.ipa" Payload)
          rm -rf "$OUT_DIR/Payload"

      - name: Verify artifact
        script: |
          set -e
          ls -lah build/ios/ipa || true
          test -f "build/ios/ipa/Runner-unsigned.ipa" || { echo "❌ IPA not found"; exit 1; }
          echo "✅ IPA ready: build/ios/ipa/Runner-unsigned.ipa"

    artifacts:
      - build/ios/ipa/*.ipa
      - build/ios/iphoneos/Runner.app/**
