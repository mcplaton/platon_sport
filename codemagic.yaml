workflows:
  ios_unsigned_ipa:
    name: iOS unsigned IPA (Flutter pack)
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: 15.4
      vars:
        IOS_MIN_VER: "15.0"

    scripts:
      - name: Flutter clean & pub get
        script: |
          flutter --version
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock
          flutter pub get

      - name: Write Podfile (iOS 15 / static frameworks)
        script: |
          cat > ios/Podfile <<'POD'
          platform :ios, '15.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'
          project 'Runner', { 'Debug' => :debug, 'Profile' => :release, 'Release' => :release }

          flutter_root = ENV['FLUTTER_ROOT']
          if flutter_root.nil? || flutter_root.empty?
            m = `flutter --version --machine 2>/dev/null`.match(/"flutterRoot"\s*:\s*"([^"]+)"/)
            flutter_root = m[1] unless m.nil?
          end
          raise 'FLUTTER_ROOT not resolved' if flutter_root.nil? || flutter_root.empty?
          load File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')

          use_frameworks! :linkage => :static
          use_modular_headers!
          flutter_ios_podfile_setup

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
          end

          post_install do |installer|
            installer.pods_project.targets.each do |t|
              flutter_additional_ios_build_settings(t)
              t.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
                config.build_settings['SWIFT_VERSION'] = '5.0'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                flags = config.build_settings['OTHER_SWIFT_FLAGS']
                if flags.is_a?(String)
                  cleaned = flags.split(' ').reject { |f|
                    f.include?('enable-upcoming-feature') || f.include?('enable-experimental-feature') || f.include?('swift-version')
                  }.join(' ')
                  config.build_settings['OTHER_SWIFT_FLAGS'] = cleaned
                end
              end
            end
          end
          POD

      - name: Ensure Firebase plist exists
        script: |
          if [ ! -f "ios/Runner/GoogleService-Info.plist" ]; then
            echo "❌ ضع ios/Runner/GoogleService-Info.plist ثم أعد التشغيل."
            exit 1
          fi

      - name: CocoaPods install (repo update)
        script: |
          cd ios
          pod repo update
          pod install --repo-update
          cd -

      - name: Build iOS (Flutter, release, no codesign)
        script: |
          flutter build ios --release --no-codesign

      - name: Verify Flutter assets exist (new layout)
        script: |
          APP_DIR="build/ios/iphoneos/Runner.app"
          test -d "$APP_DIR" || { echo "❌ Runner.app غير موجود"; exit 64; }

          APP_FW="$APP_DIR/Frameworks/App.framework"
          ASSETS_NEW="$APP_FW/flutter_assets"
          ASSETS_OLD="$APP_DIR/flutter_assets"

          if [ -d "$ASSETS_NEW" ]; then
            echo "✅ وجدنا flutter_assets داخل App.framework:"
            ls -lah "$ASSETS_NEW" | head -n 20
          elif [ -d "$ASSETS_OLD" ]; then
            echo "✅ وجدنا flutter_assets في جذر Runner.app:"
            ls -lah "$ASSETS_OLD" | head -n 20
          else
            echo "❌ لم نعثر على flutter_assets لا داخل App.framework ولا في جذر Runner.app (سبب شاشة سوداء)"
            echo "محتويات Runner.app/Frameworks:"
            ls -lah "$APP_DIR/Frameworks" || true
            exit 66
          fi

          # تأكد أيضًا من وجود App.framework
          test -d "$APP_FW" || { echo "❌ App.framework مفقود"; exit 65; }
          echo "✅ App.framework موجود"

      - name: Package IPA (manual)
        script: |
          set -e
          APP_DIR="build/ios/iphoneos/Runner.app"
          PKG_DIR="build/ios/ipa"
          rm -rf "$PKG_DIR"
          mkdir -p "$PKG_DIR/Payload"
          cp -R "$APP_DIR" "$PKG_DIR/Payload/Runner.app"
          (cd "$PKG_DIR" && /usr/bin/zip -qry Runner.ipa Payload)
          ls -lah "$PKG_DIR"

    artifacts:
      - build/ios/ipa/Runner.ipa
      - build/ios/iphoneos/Runner.app
