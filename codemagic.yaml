workflows:
  ios_unsigned_ipa:
    name: iOS unsigned IPA (manual pack)
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: 15.4
      vars:
        IOS_MIN_VER: "15.0"

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "*"
          include: true
          source: true

    scripts:
      - name: Flutter clean & pub get
        script: |
          flutter --version
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock
          flutter pub get

      - name: Write Podfile (iOS 15, Swift 5, no hard pins)
        script: |
          cat > ios/Podfile <<'POD'
          platform :ios, '15.0'
          ENV['COCOAPODS_DISABLE_STATS'] = 'true'

          project 'Runner', {
            'Debug' => :debug,
            'Profile' => :release,
            'Release' => :release,
          }

          # Resolve FLUTTER_ROOT from flutter --version --machine
          flutter_root = ENV['FLUTTER_ROOT']
          if flutter_root.nil? || flutter_root.empty?
            begin
              m = `flutter --version --machine 2>/dev/null`.match(/"flutterRoot"\s*:\s*"([^"]+)"/)
              flutter_root = m[1] unless m.nil?
            rescue
            end
          end
          raise 'FLUTTER_ROOT not resolved' if flutter_root.nil? || flutter_root.empty?
          load File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')

          use_frameworks! :linkage => :static
          use_modular_headers!

          flutter_ios_podfile_setup

          target 'Runner' do
            flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
            # Firebase pods تُحل تلقائيًا من إضافات Flutter
          end

          post_install do |installer|
            installer.pods_project.targets.each do |t|
              flutter_additional_ios_build_settings(t)
              t.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
                config.build_settings['SWIFT_VERSION'] = '5.0'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                # نظّف أي فلاغات Swift 6
                flags = config.build_settings['OTHER_SWIFT_FLAGS']
                if flags.is_a?(String)
                  cleaned = flags.split(' ').reject { |f|
                    f.include?('enable-upcoming-feature') || f.include?('enable-experimental-feature') || f.include?('swift-version')
                  }.join(' ')
                  config.build_settings['OTHER_SWIFT_FLAGS'] = cleaned
                end
                config.build_settings['SWIFT_ENABLE_EXPERIMENTAL_FEATURES'] = ''
              end
            end
          end
          POD

      - name: Ensure GoogleService-Info.plist exists
        script: |
          if [ ! -f "ios/Runner/GoogleService-Info.plist" ]; then
            echo "❌ ضع ios/Runner/GoogleService-Info.plist من Firebase Console (مشروعك) ثم أعد التشغيل."
            exit 1
          fi

      - name: CocoaPods install (repo update)
        script: |
          cd ios
          pod repo update
          pod install --repo-update --verbose
          cd -

      - name: Build unsigned archive (no code signing)
        script: |
          # نبني أرشيف Xcode بدون توقيع
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
            archive

      - name: Package IPA manually
        script: |
          set -e
          APP_PATH="build/ios/archive/Runner.xcarchive/Products/Applications/Runner.app"
          if [ ! -d "$APP_PATH" ]; then
            echo "❌ Runner.app غير موجود داخل الأرشيف."
            find build -maxdepth 5 -print
            exit 65
          fi

          mkdir -p build/ios/ipa/Payload
          rm -rf build/ios/ipa/Payload/*
          cp -R "$APP_PATH" build/ios/ipa/Payload/Runner.app

          # أضف dSYM إن أردت (اختياري)
          DSYM_DIR="build/ios/archive/Runner.xcarchive/dSYMs"
          if [ -d "$DSYM_DIR" ]; then
            cp -R "$DSYM_DIR" build/ios/ipa/
          fi

          cd build/ios/ipa
          /usr/bin/zip -qry Runner.ipa Payload
          cd - 

      - name: Verify artifact
        script: |
          echo "== IPA contents =="
          ls -lah build/ios/ipa || true
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
            echo "✅ IPA ready: build/ios/ipa/Runner.ipa"
          else
            echo "❌ IPA not found"
            exit 1
          fi

    artifacts:
      - build/ios/ipa/Runner.ipa
      - build/ios/archive/*.xcarchive
