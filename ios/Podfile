# ملف Podfile مصحح خصيصاً لمشاريع Flutter على iOS في بيئات CI/CD مثل Codemagic.

# تعيين الحد الأدنى لإصدار iOS المطلوب.
platform :ios, '15.0'

# هذا الجزء ضروري لإيجاد ملف podhelper.rb في بيئة Codemagic
# ويمنع أخطاء المسار التي تحدث عند البناء.
flutter_root = ENV['FLUTTER_ROOT'] || '/Users/builder/programs/flutter'
raise "FLUTTER_ROOT not set or not found at #{flutter_root}" unless File.exist?(flutter_root)
load File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')

# استخدام `static` لمنع مشاكل Header Search Paths، وهي سبب خطأ "Flutter/Flutter.h not found".
# واستخدام `use_modular_headers!` لدمج مكتبات Swift/Objective-C بسلاسة.
use_frameworks! :linkage => :static
use_modular_headers!

target 'Runner' do
  # هذا السطر يقوم بتثبيت جميع المكتبات (Pods) التي يحتاجها مشروع Flutter تلقائياً.
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  # يمكنك إضافة المكتبات يدوياً هنا إن لزم الأمر.
  # pod 'firebase_core', '~> 10.15'

end

post_install do |installer|
  # هذا الـ hook يقوم بتطبيق التغييرات اللازمة يدوياً
  # وهو بديل عن استدعاء flutter_post_install المسبب للمشاكل
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      cfg.build_settings['OTHER_LDFLAGS'] ||= ['$(inherited)']
      cfg.build_settings['OTHER_CFLAGS']  ||= ['$(inherited)']
    end
  end

  # حل مشكلة GoogleUtilities وبعض المكتبات الأخرى عن طريق تفعيل DEFINES_MODULE.
  %w[GoogleUtilities FirebaseCore FirebaseCoreInternal FirebaseCoreExtension FirebaseFirestore].each do |name|
    pt = installer.pod_targets.find { |x| x.name == name }
    next unless pt
    pt.user_build_configurations.keys.each do |cfg|
      pt.build_settings(cfg)['DEFINES_MODULE'] = 'YES'
    end
  end
end
