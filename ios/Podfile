platform :ios, '15.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ==== Resolve FLUTTER_ROOT robustly (works on Codemagic/macOS) ====
flutter_root = ENV['FLUTTER_ROOT']

if flutter_root.nil? || flutter_root.empty?
  begin
    machine = `flutter --version --machine 2>/dev/null`
    m = machine.match(/"flutterRoot"\s*:\s*"([^"]+)"/)
    flutter_root = m[1] unless m.nil?
  rescue
    flutter_root = nil
  end
end

if flutter_root.nil? || flutter_root.empty?
  which_flutter = `which flutter`.strip
  if !which_flutter.nil? && !which_flutter.empty?
    bin_dir = File.dirname(which_flutter)            # e.g. /usr/local/bin
    maybe_root = File.expand_path('..', bin_dir)     # e.g. /usr/local
    candidate = File.join(maybe_root, 'flutter')     # e.g. /usr/local/flutter
    flutter_root = candidate if File.exist?(candidate)
  end
end

raise '❌ FLUTTER_ROOT not resolved; cannot load podhelper.rb' if flutter_root.nil? || flutter_root.empty?

load File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')
# ===================================================================

# Firebase/Firestore need frameworks + modular headers
use_frameworks! :linkage => :static
use_modular_headers!

flutter_ios_podfile_setup

target 'Runner' do
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    target.build_configurations.each do |config|
      # Force iOS 15.0 everywhere to satisfy cloud_firestore
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      config.build_settings['SWIFT_VERSION'] = '5.0'
      config.build_settings['DEAD_CODE_STRIPPING'] = 'YES'
    end
  end
end
